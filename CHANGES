Unreleased
----------

* Rename the standalone rpc proxy to `ServiceRpcProxy` and add a
  `ClusterRpcProxy`, using a single reply queue for communicating with multiple
  remote services.
* Make the standalone event dispatcher more shell-friendly, connecting on
  demand
* Standalone rpc proxies accept a ``caller_name`` parameter to produce more
  semantic ids for the call stack


Version 1.14.0
--------------

* Remove parallel provider injection in favour of async RPC
* Update `worker_factory` to raise if asked to replace a non-existent injection
* Add various __repr__ methods for better logging
* Support for timeouts in the (non-legacy) standalone RPC proxy
* Add helper for manipulating an AMQP URI into a dict


Version 1.13.0
--------------

* RPC reply queues now auto-delete.
* Extra protection against badly-behaved dependencies during container kill
* Make legacy ``NovaRpcConsumer`` more robust against failures in the
  ``NovaRpcProvider``.


Version 1.12.0
--------------

* Add ability to make asynchronous rpc calls using the rpc proxy.
* Add a new nameko context key ``user_agent`` to support including such info
  in the rpc header.


Version 1.11.5
--------------

* Have the standalone rpc proxy mark its reply queues as auto-delete, to stop
  them staying around after use.


Version 1.11.4
--------------

* Make ``RpcConsumer`` more robust against failures in the ``RpcProvider``.
* Add a new exception ``MalformedRequest`` that rpc providers can raise if
  they detect an invalid message. Raise this exception in the default
  ``RpcProvider`` if `args` or `kwargs` keys are missing from the message.
* Fix issues in queue consumer tests against non-localhost brokers.
* Upgrade to eventlet 0.15.2.
* Include pyrabbit in requirements.txt (no longer just for tests).
* Catch dying containers in the entrypoint_hook to avoid hangs.
* Add ``expected_exceptions`` kwarg to the rpc entrypoint to enable different
  exception handling (in dependencies) for user vs system errors.


Version 1.11.3
--------------

* Add more logging for workers killed by `container.kill`.


Version 1.11.2
--------------

* Add a default implementation for `acquire_injection` (returning `None`) for
  injections that are used for side-effects rather than injecting dependencies.
* `acquire_injection` is no longer an `abstractmethod`.


Version 1.11.1
--------------

* New test helper `nameko.testing.services.entrypoint_waiter` to wait for
  entrypoints (e.g. event handlers) to complete.


Version 1.11.0
--------------

* Raise a specific RpcTimeout error in the RPC proxy rather than
 `socket.timeout` to avoid confusing kombu's Connection.ensure
* Improve logging helpers
* Use inspect.getcallargs instead of shadow lambda for RPC argument checking
* Add default retry policies to all publishers
* Stricter handling of connections between tests
* Workarounds for rabbitmq bugs described at
  https://groups.google.com/forum/#!topic/rabbitmq-users/lrl0tYd1L38

Version 1.10.1
--------------

* Inspect the service class (instead of an instance) in `worker_factory`. Works
  better with descriptors.
* Explicity delete exc_info variable when not needed, to help the gc.


Version 1.10.0
--------------

* Entrypoint providers' handle_result is now able to manipulate and modify and
  return the (result, exc_info) tuple. This enables default post-processing
  (e.g. serialization, translations)
* Added serialization safety to legacy rpc entrypoint.


Version 1.9.1
-------------

* Bugfix to exception handling in `nameko.legacy.dependencies`


Version 1.9.0
-------------

* No longer relying on eventlet for standalone RPC proxy timeouts.
* Introduced RPC entrypoints compatible with the 'legacy' proxy.


Version 1.8.2
-------------

* Documentation generator accepts a function listing event classes and adds
  to output accordingly.


Version 1.8.1
-------------

* Adding `wait_for_worker_idle` test helper.

Version 1.8.0
-------------

* Now passing exc_info tuples instead of bare exceptions to `worker_result`
  and `handle_result`, to enable exception processing in non-worker
  greenthreads.

Version 1.7.2
-------------

* `Container._run_worker` now calls any `handle_result` method before
  dependency teardown.
* Serialization errors now generate a specific error message rather
  than bubbling into the container.
* Minor change to nameko_doc output.

Version 1.7.1
-------------

* Added `language`, `auth_token` and `user_id` injections to make
  context data available to service workers.
* Refacted constants into their own module.
* Minor test changes to enable testing on shared rabbit brokers.

Version 1.7.0
-------------

* `Container.spawn_worker` now throws `ContainerBeingKilled` if a `kill` is
  in progress, since some providers may already be dead. Providers shuold catch
  this and e.g. requeue rpc messages. There is a race condition between
  completing the kill sequence and remaining entrypoints firing.


Version 1.6.1
-------------

* Revert changes to legacy exception serialization to maintain backwards
  compatibility with old clients.
* Add forwards compatibility for future clients that wish to serialize
  exceptions into more data
* Promote conftest rabbit manipulations to test helpers


Version 1.6.0
-------------

* Rename instance_factory to worker_factory
* Raise IncorrectSignature as exception instead of “RemoteError: TypeError”
  if an RPC method is called with invalid arguments
* Raise MethodNotFound as exception instead of “RemoteError: MethodNotFound”
* Let log handlers format warning messages so that aggregators group them
  correctly.
* Expose the entire dependency provider (rather than just the method name) to
  the worker context.


Version 1.5.0
-------------

* Improvements to kill() enabling better tracebacks and cleaner teardown.
  - Using sys.exc_info to preserve tracebacks
  - No longer passing exc into DependencyProvider.kill(), removing race
    conditions.
  - No longer requiring exc in ServiceContainer.kill()

Version 1.4.1
-------------

* Adds the `nameko_doc` package, for easing the creation of service-oriented
  documentation.


Version 1.4.0
-------------

* RPC calls to non-existent services (no queues bound to the RPC exchange with
  the appropriate routing key) now raise an exception instead of hanging
  indefinitely. Note that calls to existing but non-running services (where the
  queue exists but has no consumer) behave as before.


Version 1.3.5
-------------

* Increased test resilience. Force-closing existing connections on rabbit
  reset


Version 1.3.4
-------------

* Use MagicMock for injection replacement in test utilities
* Use autospec=True wherever possible when mocking
* Merge ServiceContainers into a single class


Version 1.3.3
-------------

* Bugfixes enabling reconnection to the broker if the connection is temporarily
  lost.


Version 1.3.2
-------------

* Dropping headers with a `None` value because they can't be serialised by amqp


Version 1.3.1
-------------

* Add `event_handler_cls` kwarg to the `event_handler` entrypoint, for using
  a custom subclass of the EventHandler provider


Version 1.3.0
-------------

* Standalone RPC proxy interface changed to class with contextmanager interface
  and manual start() and stop() methods.
